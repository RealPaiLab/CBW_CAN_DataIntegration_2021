[["index.html", "Multi-modal Data Integration CBW Cancer Workshop Multi-modal Data Integration ( June 2021 )", " Multi-modal Data Integration CBW Cancer Workshop Shraddha Pai Sys.Date() Multi-modal Data Integration ( June 2021 ) This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. "],["welcome.html", "Welcome Class materials Setup instructions Basic programs", " Welcome This book contains material for the high-throughput data integration module, and is part of the CBW Cancer analysis workshop (insert link). Class materials You can download course slides here. ADD LINK Setup instructions Install these tools on your laptop before coming to the workshop: Basic programs Cytoscape Installation Please install the latest version of Cytoscape 3.8.2 as well as a group of Cytoscape Apps that we will be using for different parts of the course. Install Cytoscape 3.8.2: Go to: https://cytoscape.org/download-platforms.html Choose the version corresponding to your operating system (OS, Windows or UNIX) Follow instructions to install cytoscape Verify that Cytoscape has been installed correctly by launching the newly installed application Contact your system administrator if you have trouble with Java installation Install the following Cytoscape Apps - Apps are installed from within Cytoscape. In order to install Apps launch Cytoscape From the menu bar, select ‘Apps,’ then ‘App Manager.’ Within ‘all apps,’ search for the following and install: EnrichmentMap 3.3.2 EnrichmentMap Pipeline Collection 1.1.0 (it will install ClusterMaker2, WordCloud and AutoAnnotate) "],["intro.html", "Introduction", " Introduction What the major lab exercises will cover. "],["lab-1-build-3-way-patient-classifier-from-4-data-layers.html", "Lab 1: Build 3-way patient classifier from 4 data layers Intro Prepare data Design PSN features Build predictor Examine output Conclusion sessionInfo", " Lab 1: Build 3-way patient classifier from 4 data layers Intro Prepare data suppressWarnings(suppressMessages(require(netDx))) In this example, we use curated data from The Cancer Genome Atlas, through the BioConductor curatedTCGAData package. Here we load the required packages and download clinical and gene expression data. suppressMessages(library(curatedTCGAData)) Take a look at the available data without downloading any (set dry.run=TRUE): curatedTCGAData(diseaseCode=&quot;BRCA&quot;, assays=&quot;*&quot;,dry.run=TRUE) Let’s download four kinds of data: gene expression (measured on XXX arrays) DNA methylation (XXX arrays) proteomic measures from XXX, and miRNA sequencing brca &lt;- suppressMessages(curatedTCGAData(&quot;BRCA&quot;, c(&quot;mRNAArray&quot;,&quot;Methylation_methyl27&quot;, &quot;RPPAArray&quot;,&quot;miRNASeqGene&quot;), dry.run=FALSE)) This call returns a MultiAssayExperiment object. Recall that this is a container for storing multiple assays performed on the same set of samples. Look at this tutorial to learn more. Let’s briefly explore the brca MultiAssayExperiment object. brca assays() returns a list with all -omic data associated with this object. Particular assays can be accessed by subsetting in the standard R style: summary(assays(brca)) names(assays(brca)) head(assays(brca)[[1]]) Look at sample phenotype data, where rows contain data for each patient and columns have non-omic measures (e.g. clinical data): pheno &lt;- colData(brca) colnames(pheno)[1:20] head(pheno[,1:5]) This next code block prepares the TCGA data. This includes: removing duplicate samples reformatting patient IDs (e.g. removing spaces and hyphens) creating an ID column in colData(brca), which contains unique patient IDs creating a STATUS column in colData(brca) which contains the patient labels (i.e what we want netDx to classify). In practice you would do this once and save the data before running netDx. This code has been moved into a supporting file, prepare_data.R. You can explore it after the lab to see how some things are achieved (e.g. removing duplicate samples). source(&quot;prepare_data.R&quot;) brca &lt;- prepareDataForCBW(brca) Notice that we now have ID and STATUS columns in the sample metadata table. Note: These columns are required by netDx. pheno &lt;- colData(brca) head(pheno[,c(&quot;ID&quot;,&quot;STATUS&quot;)]) table(pheno$STATUS,useNA=&quot;always&quot;) # useNA lets you see # unintentional missing values Design PSN features netDx allows the user to define how data is converted into PSNs, which are the features that go into the model. This is done specifically by telling the model how to group different types of data and how to define similarity for each of these (e.g. Pearson correlation, normalized difference, etc.,). The relevant input parameters are: dataList: the patient data, provided as a MultiAssayExperiment object. Refer to the tutorials for MultiAssayExperiment to see how to construct those objects from data. groupList: sets of input data that would correspond to individual networks (e.g. genes grouped into pathways) netDir: the directory where the resulting PSN would be stored. dataList What is this: The input data (here, brca). Format: MultiAssayExperiment object. groupList What is this: groupList tells netDx how to group units within a layer, to generate a PSN. In this simple example we just create one network per datatype expr &lt;- assays(brca) groupList &lt;- list() for (k in 1:length(expr)) { cur &lt;- expr[[k]]; nm &lt;- names(expr)[k] # all measure names should be in rownames column groupList[[nm]] &lt;- list(nm=rownames(cur)) names(groupList[[nm]])[1] &lt;- nm; } groupList is a two tiered list or list-of-lists. The first tier is for each data layers, with names matching those in assays(brca). The second tier contains all the PSNs we want to make for that layer. Here is the first layer: summary(groupList) In this lab exercise we create only one PSN per data layer, using all the measures from an -omic assay. e.g. One PSN based on similarity across entire transcriptome, one for methylome, etc.,). So in this lab exercise, the inner tier simply contains one entry, with all measures for the given layer. This design will get more interested in Lab 2, when we create pathway-level features. names(groupList[[&quot;BRCA_mRNAArray-20160128&quot;]]) head(groupList[[&quot;BRCA_mRNAArray-20160128&quot;]][[1]]) Define patient similarity for each network This function is defined by the user and tells the predictor how to create networks from the provided input data. This function requires dataList,groupList, and netDir as input variables. The residual ... parameter is to pass additional variables to makePSN_NamedMatrix(), notably numCores (number of parallel jobs). netDx requires that this function have: dataList,groupList, and netDir as input variables. The residual ... parameter is to pass additional variables to makePSN_NamedMatrix(), notably number of cores for parallel processing (numCores). makeNets &lt;- function(dataList, groupList, netDir,...) { netList &lt;- c() # initialize before is.null() check layerNames &lt;- c(&quot;BRCA_miRNASeqGene-20160128&quot;, &quot;BRCA_mRNAArray-20160128&quot;, &quot;BRCA_RPPAArray-20160128&quot;, &quot;BRCA_Methylation_methyl27-20160128&quot;) for (nm in layerNames){ ## for each layer if (!is.null(groupList[[nm]])){ ## must check for null for each layer netList_cur &lt;- makePSN_NamedMatrix( dataList[[nm]], rownames(dataList[[nm]]), ## names of measures (e.g. genes, CpGs) groupList[[nm]], ## how to group measures in that layer netDir, ## leave this as-is, netDx will figure out where this is. verbose=TRUE, writeProfiles=TRUE, ## use Pearson correlation-based similarity ... ) netList &lt;- c(netList,netList_cur) ## just leave this in } } return(unlist(netList)) ## just leave this in } Note: While netDx provides a high degree of flexibility in achieving your design of choice, it is up to the user to ensure that the design, i.e. the similarity metric and variable groupings, is appropriate for your application. Domain knowledge is almost likely required for good design. Build predictor Finally we call the function that runs the netDx predictor. We provide: patient data (dataList) grouping rules (groupList) function to create PSN from data, includes choice of similarity metric (makeNetFunc) number of train/test splits over which to collect feature scores and average performance: numSplits, maximum score for features in one round of feature selection (featScoreMax, set to 10) threshold to call feature-selected networks for each train/test split (featSelCutoff); only features scoring this value or higher will be used to classify test patients, number of cores to use for parallel processing (numCores). The call below runs 2 train/test splits, to be able to run fast. Within each split, it: splits data into train/test using the default split of 80:20 score2 networks between 0 to 2 (i.e. featScoreMax=2) uses networks that score &gt;=1 out of 2 (featSelCutoff) to classify test samples for that split. These are unrealistically low values set so the example will run fast. In practice a good starting point is featScoreMax=10, featSelCutoff=9 and numSplits=100, but these parameters depend on the sample sizes in the dataset and heterogeneity of the samples. set.seed(42) # make results reproducible outDir &lt;- paste(tempdir(),randAlphanumString(), &quot;pred_output&quot;,sep=getFileSep()) if (file.exists(outDir)) unlink(outDir,recursive=TRUE) model &lt;- buildPredictor( dataList=brca, ## your data groupList=groupList, ## grouping strategy makeNetFunc=makeNets, ## function to build PSNs outDir=outDir, ## output directory trainProp=0.8, ## pct of samples to use to train model in ## each split numSplits=2L, ## number of train/test splits featSelCutoff=1L, ## threshold for calling something ## feature-selected featScoreMax=2L, ## max score for feature selection numCores=4L, ## set higher for parallelizing debugMode=FALSE, keepAllData=FALSE, ## set to TRUE for debugging or low-level files used by the predictor logging=&quot;none&quot; ) Examine output The results are stored in the list object returned by the buildPredictor() call. This list contains: inputNets: all input networks that the model started with. Split&lt;i&gt;: a list with results for each train-test split predictions: real and predicted labels for test patients accuracy: percent accuracy of predictions featureScores: feature scores for each label (list with g entries, where g is number of patient labels). Each entry contains the feature selection scores for the corresponding label. featureSelected: vector of features that pass feature selection. List of length g, with one entry per label. summary(model) summary(model$Split1) Get model results Now we get model output, including performance for various train/test splits and consistently high-scoring features. helper.R contains convenience functions to do this, which will be integrated into upcoming versions of netDx. In the function below, we define top-scoring features as those which score at least 2 in at least half of the train/test splits source(&quot;helper.R&quot;) results &lt;- getResults(brca,model,featureSelCutoff=2L, featureSelPct=0.5) results contains performance, selectedFeatures for each patient label, and the table of feature scores. summary(results) Look at the performance: results$performance Look at feature scores for all labels, across all train-test splits: results$featureScores And here are selected features, which are those scoring 2 out of 2 in at least half of the splits. This threshold is simply for illustration. In practice we would run at least 10 train/test splits (ideally 100+), and look for features that score 7+ out of 10 in &gt;70% splits. r$selectedFeatures We finally get the integrated PSN and visualize it using a tSNE plot: psn &lt;- getPSN(brca,groupList,makeNets,results$selectedFeatures) tsne &lt;- tSNEPlotter( psn$patientSimNetwork_unpruned, colData(brca) ) Conclusion Congratulations! You have successfully classified three types of tumours by integrating four different -omic layers (transcriptomic, methylomic,proteomic and miRNA). But these features aren’t really interpretable. Let’s change that with our next tutorial. Best practices side note: We end this tutorial with a call to sessionInfo() which prints the complete environment information for your R session. This is standard output that should be reported to R package managers when you write in with a question, particularly if reporting an error or bug. Sometimes a particular underlying dependency package may be the cause of an error, or you may need to upgrade to a newer version of the package. By including this info in an email, you will allow the other person to better solve your issue. sessionInfo sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.2 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats4 parallel stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] plotrix_3.8-1 ggplot2_3.3.3 Rtsne_0.15 rhdf5_2.34.0 ## [5] curatedTCGAData_1.12.1 MultiAssayExperiment_1.16.0 SummarizedExperiment_1.20.0 GenomicRanges_1.42.0 ## [9] GenomeInfoDb_1.26.7 IRanges_2.24.1 S4Vectors_0.28.1 MatrixGenerics_1.2.1 ## [13] matrixStats_0.58.0 netDx_1.2.3 bigmemory_4.5.36 Biobase_2.50.0 ## [17] BiocGenerics_0.36.1 ## ## loaded via a namespace (and not attached): ## [1] uuid_0.1-4 AnnotationHub_2.22.1 BiocFileCache_1.14.0 NMF_0.23.0 ## [5] plyr_1.8.6 igraph_1.2.6 RCy3_2.10.2 lazyeval_0.2.2 ## [9] splines_4.0.5 entropy_1.3.0 BiocParallel_1.24.1 rncl_0.8.4 ## [13] gridBase_0.4-7 scater_1.18.6 digest_0.6.27 htmltools_0.5.1.1 ## [17] foreach_1.5.1 viridis_0.6.1 fansi_0.4.2 magrittr_2.0.1 ## [21] memoise_2.0.0 cluster_2.1.1 doParallel_1.0.16 ROCR_1.0-11 ## [25] limma_3.46.0 annotate_1.68.0 R.utils_2.10.1 prettyunits_1.1.1 ## [29] colorspace_2.0-1 blob_1.2.1 rappdirs_0.3.3 xfun_0.23 ## [33] dplyr_1.0.6 jsonlite_1.7.2 crayon_1.4.1 RCurl_1.98-1.3 ## [37] bigmemory.sri_0.1.3 graph_1.68.0 genefilter_1.72.1 phylobase_0.8.10 ## [41] survival_3.2-10 iterators_1.0.13 ape_5.5 glue_1.4.2 ## [45] registry_0.5-1 gtable_0.3.0 zlibbioc_1.36.0 XVector_0.30.0 ## [49] DelayedArray_0.16.3 BiocSingular_1.6.0 kernlab_0.9-29 Rhdf5lib_1.12.1 ## [53] shape_1.4.6 SingleCellExperiment_1.12.0 HDF5Array_1.18.1 scales_1.1.1 ## [57] DBI_1.1.1 edgeR_3.32.1 rngtools_1.5 Rcpp_1.0.6 ## [61] viridisLite_0.4.0 xtable_1.8-4 progress_1.2.2 bit_4.0.4 ## [65] rsvd_1.0.5 glmnet_4.1-1 netSmooth_1.10.0 httr_1.4.2 ## [69] RColorBrewer_1.1-2 ellipsis_0.3.2 farver_2.1.0 pkgconfig_2.0.3 ## [73] XML_3.99-0.6 R.methodsS3_1.8.1 scuttle_1.0.4 sass_0.4.0 ## [77] dbplyr_2.1.1 locfit_1.5-9.4 utf8_1.2.1 RJSONIO_1.3-1.4 ## [81] labeling_0.4.2 later_1.2.0 howmany_0.3-1 tidyselect_1.1.1 ## [85] rlang_0.4.11 softImpute_1.4-1 reshape2_1.4.4 AnnotationDbi_1.52.0 ## [89] BiocVersion_3.12.0 munsell_0.5.0 tools_4.0.5 cachem_1.0.5 ## [93] ExperimentHub_1.16.1 generics_0.1.0 RSQLite_2.2.7 ade4_1.7-16 ## [97] evaluate_0.14 stringr_1.4.0 fastmap_1.1.0 yaml_2.2.1 ## [101] knitr_1.33 bit64_4.0.5 purrr_0.3.4 nlme_3.1-152 ## [105] sparseMatrixStats_1.2.1 mime_0.10 R.oo_1.24.0 pracma_2.3.3 ## [109] xml2_1.3.2 rstudioapi_0.13 compiler_4.0.5 interactiveDisplayBase_1.28.0 ## [113] beeswarm_0.3.1 curl_4.3.1 tibble_3.1.2 bslib_0.2.5.1 ## [117] RNeXML_2.4.5 stringi_1.6.2 RSpectra_0.16-0 lattice_0.20-41 ## [121] Matrix_1.3-2 vctrs_0.3.8 pillar_1.6.1 lifecycle_1.0.0 ## [125] rhdf5filters_1.2.1 BiocManager_1.30.15 jquerylib_0.1.4 combinat_0.0-8 ## [129] zinbwave_1.12.0 BiocNeighbors_1.8.2 data.table_1.14.0 bitops_1.0-7 ## [133] irlba_2.3.3 httpuv_1.6.1 R6_2.5.0 bookdown_0.22 ## [137] promises_1.2.0.1 gridExtra_2.3 vipor_0.4.5 codetools_0.2-18 ## [141] MASS_7.3-53.1 assertthat_0.2.1 pkgmaker_0.32.2 withr_2.4.2 ## [145] GenomeInfoDbData_1.2.4 locfdr_1.1-8 hms_1.1.0 grid_4.0.5 ## [149] beachmat_2.6.4 tidyr_1.1.3 rmarkdown_2.8 DelayedMatrixStats_1.12.3 ## [153] shiny_1.6.0 clusterExperiment_2.10.1 tinytex_0.31 ggbeeswarm_0.6.0 "]]
